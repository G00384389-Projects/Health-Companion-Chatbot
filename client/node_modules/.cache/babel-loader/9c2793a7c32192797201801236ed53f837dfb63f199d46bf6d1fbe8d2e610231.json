{"ast":null,"code":"var _jsxFileName = \"C:\\\\ppitproject\\\\flaskOpenAi\\\\client\\\\src\\\\Components\\\\chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatBox() {\n  _s();\n  const [userMessage, setUserMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const sendMessage = async () => {\n    if (!userMessage.trim()) return;\n    const newMessages = [...messages, {\n      role: 'user',\n      content: userMessage\n    }];\n    setMessages(newMessages);\n    const eventSource = new EventSource(`http://localhost:5000/chat`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        message: userMessage\n      })\n    });\n    eventSource.onmessage = function (event) {\n      setMessages(prev => [...prev, {\n        role: 'bot',\n        content: event.data\n      }]);\n    };\n    eventSource.onerror = function (error) {\n      console.error('EventSource failed:', error);\n      eventSource.close();\n    };\n    setUserMessage(''); // Clear input after sending\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chat with Bot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: msg.role,\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.role === 'user' ? 'You' : 'Bot', \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this), \" \", msg.content]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: userMessage,\n      onChange: e => setUserMessage(e.target.value),\n      onKeyPress: e => e.key === 'Enter' ? sendMessage() : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBox, \"s+SUoBJqm+J+6z/KuXROo3OahbM=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ChatBox","_s","userMessage","setUserMessage","messages","setMessages","sendMessage","trim","newMessages","role","content","eventSource","EventSource","method","headers","body","JSON","stringify","message","onmessage","event","prev","data","onerror","error","console","close","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","msg","index","type","value","onChange","e","target","onKeyPress","key","onClick","_c","$RefreshReg$"],"sources":["C:/ppitproject/flaskOpenAi/client/src/Components/chatbot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction ChatBox() {\r\n  const [userMessage, setUserMessage] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const sendMessage = async () => {\r\n    if (!userMessage.trim()) return;\r\n\r\n    const newMessages = [...messages, { role: 'user', content: userMessage }];\r\n    setMessages(newMessages);\r\n\r\n    const eventSource = new EventSource(`http://localhost:5000/chat`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ message: userMessage })\r\n    });\r\n\r\n    eventSource.onmessage = function(event) {\r\n      setMessages(prev => [...prev, { role: 'bot', content: event.data }]);\r\n    };\r\n\r\n    eventSource.onerror = function(error) {\r\n      console.error('EventSource failed:', error);\r\n      eventSource.close();\r\n    };\r\n\r\n    setUserMessage(''); // Clear input after sending\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Chat with Bot</h1>\r\n      <div className=\"messages\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={msg.role}>\r\n            <strong>{msg.role === 'user' ? 'You' : 'Bot'}:</strong> {msg.content}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        value={userMessage}\r\n        onChange={e => setUserMessage(e.target.value)}\r\n        onKeyPress={e => e.key === 'Enter' ? sendMessage() : null}\r\n      />\r\n      <button onClick={sendMessage}>Send</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatBox;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMU,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI,CAACJ,WAAW,CAACK,IAAI,CAAC,CAAC,EAAE;IAEzB,MAAMC,WAAW,GAAG,CAAC,GAAGJ,QAAQ,EAAE;MAAEK,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAER;IAAY,CAAC,CAAC;IACzEG,WAAW,CAACG,WAAW,CAAC;IAExB,MAAMG,WAAW,GAAG,IAAIC,WAAW,CAAE,4BAA2B,EAAE;MAChEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,OAAO,EAAEhB;MAAY,CAAC;IAC/C,CAAC,CAAC;IAEFS,WAAW,CAACQ,SAAS,GAAG,UAASC,KAAK,EAAE;MACtCf,WAAW,CAACgB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;QAAEZ,IAAI,EAAE,KAAK;QAAEC,OAAO,EAAEU,KAAK,CAACE;MAAK,CAAC,CAAC,CAAC;IACtE,CAAC;IAEDX,WAAW,CAACY,OAAO,GAAG,UAASC,KAAK,EAAE;MACpCC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3Cb,WAAW,CAACe,KAAK,CAAC,CAAC;IACrB,CAAC;IAEDvB,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;EACtB,CAAC;EAED,oBACEJ,OAAA;IAAA4B,QAAA,gBACE5B,OAAA;MAAA4B,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBhC,OAAA;MAAKiC,SAAS,EAAC,UAAU;MAAAL,QAAA,EACtBvB,QAAQ,CAAC6B,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACvBpC,OAAA;QAAiBiC,SAAS,EAAEE,GAAG,CAACzB,IAAK;QAAAkB,QAAA,gBACnC5B,OAAA;UAAA4B,QAAA,GAASO,GAAG,CAACzB,IAAI,KAAK,MAAM,GAAG,KAAK,GAAG,KAAK,EAAC,GAAC;QAAA;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACG,GAAG,CAACxB,OAAO;MAAA,GAD5DyB,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNhC,OAAA;MACEqC,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEnC,WAAY;MACnBoC,QAAQ,EAAEC,CAAC,IAAIpC,cAAc,CAACoC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC9CI,UAAU,EAAEF,CAAC,IAAIA,CAAC,CAACG,GAAG,KAAK,OAAO,GAAGpC,WAAW,CAAC,CAAC,GAAG;IAAK;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3D,CAAC,eACFhC,OAAA;MAAQ4C,OAAO,EAAErC,WAAY;MAAAqB,QAAA,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CAAC;AAEV;AAAC9B,EAAA,CAjDQD,OAAO;AAAA4C,EAAA,GAAP5C,OAAO;AAmDhB,eAAeA,OAAO;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}