{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rossh\\\\ppitproject\\\\ppitproject\\\\client\\\\src\\\\Components\\\\chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatBox() {\n  _s();\n  const [userMessage, setUserMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  // const sendMessage = () => {\n  //   if (!userMessage.trim()) return;  // Prevent sending empty messages\n  //   const query = new URLSearchParams({ message: userMessage }).toString();\n  //   const url = `http://localhost:5000/chat?${query}`;\n  //   const eventSource = new EventSource(url);\n\n  //   eventSource.onmessage = function(event) {\n  //     console.log('New message from API:', event.data);  // Ensure this logs\n  //     const newMessage = { role: 'bot', content: event.data.trim() };\n\n  //     // Check if the message is being added to state\n  //     console.log('Adding to state:', newMessage);\n\n  //     setMessages(prevMessages => [...prevMessages, newMessage]);\n  //   };\n\n  //   eventSource.onerror = function(error) {\n  //     console.error('EventSource failed:', error);\n  //     eventSource.close();\n  //   };\n\n  //   // Adding user's message to the chat window immediately\n  //   setMessages(prevMessages => [...prevMessages, { role: 'user', content: userMessage }]);\n  //   setUserMessage('');  // Clear input after sending\n  // };\n\n  //   const sendMessage = () => {\n  //     const query = new URLSearchParams({ message: userMessage }).toString();\n  //     const url = `http://localhost:5000/chat?${query}`;\n  //     const eventSource = new EventSource(url);\n\n  //     eventSource.onmessage = function(event) {\n  //         console.log('New message from API:', event.data);\n  //         setMessages(prevMessages => [...prevMessages, { role: 'bot', content: event.data.trim() }]);\n  //     };\n\n  //     eventSource.onerror = function(error) {\n  //         console.error('EventSource encountered an error:', error);\n  //         eventSource.close();\n  //         setMessages(prevMessages => [...prevMessages, { role: 'bot', content: \"Error in connection. Please try again.\" }]);\n  //     };\n\n  //     setUserMessage('');\n  // };\n\n  const sendMessage = () => {\n    const query = new URLSearchParams({\n      message: userMessage\n    }).toString();\n    const url = `http://localhost:5000/chat?${query}`;\n    const eventSource = new EventSource(url);\n    eventSource.onmessage = function (event) {\n      console.log('New message from API:', event.data);\n      const newData = event.data.slice(5).trim(); // Assuming data comes as \"data: <message>\\n\\n\"\n      setMessages(prevMessages => [...prevMessages, {\n        role: 'bot',\n        content: newData\n      }]);\n    };\n    eventSource.onerror = function (error) {\n      console.error('EventSource encountered an error:', error);\n      eventSource.close();\n      setMessages(prevMessages => [...prevMessages, {\n        role: 'bot',\n        content: \"Failed to connect. Please refresh.\"\n      }]);\n    };\n    setUserMessage(''); // Clear input after sending\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chat with Bot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: msg.role === 'user' ? 'user' : 'bot',\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.role === 'user' ? 'You' : 'Bot', \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), \" \", msg.content]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: userMessage,\n      onChange: e => setUserMessage(e.target.value),\n      onKeyPress: e => e.key === 'Enter' && sendMessage()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBox, \"s+SUoBJqm+J+6z/KuXROo3OahbM=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ChatBox","_s","userMessage","setUserMessage","messages","setMessages","sendMessage","query","URLSearchParams","message","toString","url","eventSource","EventSource","onmessage","event","console","log","data","newData","slice","trim","prevMessages","role","content","onerror","error","close","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","msg","index","type","value","onChange","e","target","onKeyPress","key","onClick","_c","$RefreshReg$"],"sources":["C:/Users/rossh/ppitproject/ppitproject/client/src/Components/chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction ChatBox() {\r\n  const [userMessage, setUserMessage] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  // const sendMessage = () => {\r\n  //   if (!userMessage.trim()) return;  // Prevent sending empty messages\r\n  //   const query = new URLSearchParams({ message: userMessage }).toString();\r\n  //   const url = `http://localhost:5000/chat?${query}`;\r\n  //   const eventSource = new EventSource(url);\r\n\r\n  //   eventSource.onmessage = function(event) {\r\n  //     console.log('New message from API:', event.data);  // Ensure this logs\r\n  //     const newMessage = { role: 'bot', content: event.data.trim() };\r\n\r\n  //     // Check if the message is being added to state\r\n  //     console.log('Adding to state:', newMessage);\r\n\r\n  //     setMessages(prevMessages => [...prevMessages, newMessage]);\r\n  //   };\r\n\r\n  //   eventSource.onerror = function(error) {\r\n  //     console.error('EventSource failed:', error);\r\n  //     eventSource.close();\r\n  //   };\r\n\r\n  //   // Adding user's message to the chat window immediately\r\n  //   setMessages(prevMessages => [...prevMessages, { role: 'user', content: userMessage }]);\r\n  //   setUserMessage('');  // Clear input after sending\r\n  // };\r\n\r\n  //   const sendMessage = () => {\r\n  //     const query = new URLSearchParams({ message: userMessage }).toString();\r\n  //     const url = `http://localhost:5000/chat?${query}`;\r\n  //     const eventSource = new EventSource(url);\r\n\r\n  //     eventSource.onmessage = function(event) {\r\n  //         console.log('New message from API:', event.data);\r\n  //         setMessages(prevMessages => [...prevMessages, { role: 'bot', content: event.data.trim() }]);\r\n  //     };\r\n\r\n  //     eventSource.onerror = function(error) {\r\n  //         console.error('EventSource encountered an error:', error);\r\n  //         eventSource.close();\r\n  //         setMessages(prevMessages => [...prevMessages, { role: 'bot', content: \"Error in connection. Please try again.\" }]);\r\n  //     };\r\n\r\n  //     setUserMessage('');\r\n  // };\r\n\r\n  const sendMessage = () => {\r\n    const query = new URLSearchParams({ message: userMessage }).toString();\r\n    const url = `http://localhost:5000/chat?${query}`;\r\n    const eventSource = new EventSource(url);\r\n\r\n    eventSource.onmessage = function (event) {\r\n      console.log('New message from API:', event.data);\r\n      const newData = event.data.slice(5).trim(); // Assuming data comes as \"data: <message>\\n\\n\"\r\n      setMessages(prevMessages => [...prevMessages, { role: 'bot', content: newData }]);\r\n    };\r\n\r\n    eventSource.onerror = function (error) {\r\n      console.error('EventSource encountered an error:', error);\r\n      eventSource.close();\r\n      setMessages(prevMessages => [...prevMessages, { role: 'bot', content: \"Failed to connect. Please refresh.\" }]);\r\n    };\r\n\r\n    setUserMessage('');  // Clear input after sending\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h1>Chat with Bot</h1>\r\n      <div className=\"messages\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={msg.role === 'user' ? 'user' : 'bot'}>\r\n            <strong>{msg.role === 'user' ? 'You' : 'Bot'}:</strong> {msg.content}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        value={userMessage}\r\n        onChange={e => setUserMessage(e.target.value)}\r\n        onKeyPress={e => e.key === 'Enter' && sendMessage()}\r\n      />\r\n      <button onClick={sendMessage}>Send</button>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default ChatBox;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}